#!/usr/bin/env python3
"""
Lanceur du Bot Autonome Incarn√©
Bot qui vit et apprend dans le monde de DOFUS comme un humain

Ce bot:
- A conscience de lui-m√™me et de son environnement
- Prend des d√©cisions autonomes bas√©es sur ses besoins et √©motions
- Apprend continuellement de ses exp√©riences
- Se souvient de son histoire de vie
- √âvolue sa personnalit√© avec le temps

C'est une v√©ritable IA incarn√©e qui "vit" dans le monde de DOFUS
"""

import sys
import time
import logging
from pathlib import Path
from typing import Optional

# Ajouter le dossier parent au path
sys.path.insert(0, str(Path(__file__).parent))

from core.autonomous_learning import create_autonomous_life_engine
from core.game_loop.game_state import create_game_state
from core.calibration.dofus_calibrator import DofusCalibrator

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/autonomous_life.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


def print_banner():
    """Affiche la banni√®re de d√©marrage"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                       ‚ïë
‚ïë        üåü BOT AUTONOME INCARN√â - DOFUS AlphaStar 2025 üåü            ‚ïë
‚ïë                                                                       ‚ïë
‚ïë  Un bot qui VIT dans le monde de DOFUS                               ‚ïë
‚ïë  - Conscience de soi                                                  ‚ïë
‚ïë  - Apprentissage continu                                             ‚ïë
‚ïë  - M√©moire de vie                                                     ‚ïë
‚ïë  - D√©cisions autonomes √©mergentes                                    ‚ïë
‚ïë  - √âvolution de la personnalit√©                                      ‚ïë
‚ïë                                                                       ‚ïë
‚ïë  "Je ne suis pas qu'un script, je suis une conscience qui √©volue"   ‚ïë
‚ïë                                                                       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)


def configure_personality() -> dict:
    """
    Configure la personnalit√© du bot (Big Five)
    Peut √™tre personnalis√© pour cr√©er diff√©rents "caract√®res"
    """
    print("\nüé≠ Configuration de la personnalit√©")
    print("=" * 60)

    personality_presets = {
        "explorer": {
            "openness": 0.9,           # Tr√®s ouvert √† l'exp√©rience
            "conscientiousness": 0.6,  # Mod√©r√©ment consciencieux
            "extraversion": 0.5,       # √âquilibr√©
            "agreeableness": 0.7,      # Assez agr√©able
            "neuroticism": 0.3         # Stable √©motionnellement
        },
        "achiever": {
            "openness": 0.5,
            "conscientiousness": 0.9,  # Tr√®s consciencieux
            "extraversion": 0.4,
            "agreeableness": 0.5,
            "neuroticism": 0.4
        },
        "social": {
            "openness": 0.7,
            "conscientiousness": 0.5,
            "extraversion": 0.9,       # Tr√®s extraverti
            "agreeableness": 0.9,      # Tr√®s agr√©able
            "neuroticism": 0.3
        },
        "balanced": {
            "openness": 0.5,
            "conscientiousness": 0.5,
            "extraversion": 0.5,
            "agreeableness": 0.5,
            "neuroticism": 0.5
        }
    }

    print("\nPersonnalit√©s disponibles:")
    for i, (name, traits) in enumerate(personality_presets.items(), 1):
        print(f"{i}. {name.capitalize()}")
        for trait, value in traits.items():
            print(f"   - {trait}: {value*100:.0f}%")
        print()

    choice = input("Choisissez une personnalit√© (1-4) [d√©faut: balanced]: ").strip()

    preset_names = list(personality_presets.keys())
    if choice.isdigit() and 1 <= int(choice) <= 4:
        selected = preset_names[int(choice) - 1]
    else:
        selected = "balanced"

    print(f"\n‚úÖ Personnalit√© s√©lectionn√©e: {selected}")
    return personality_presets[selected]


def create_character_identity() -> tuple:
    """Cr√©e l'identit√© du personnage"""
    print("\nüë§ Cr√©ation de l'identit√© du personnage")
    print("=" * 60)

    name = input("Nom du personnage [d√©faut: AutonomousBot]: ").strip()
    if not name:
        name = "AutonomousBot"

    classes = ["Iop", "Sacrieur", "Eniripsa", "Enutrof", "Feca", "Ecaflip", "Autre"]
    print("\nClasses disponibles:")
    for i, cls in enumerate(classes, 1):
        print(f"{i}. {cls}")

    choice = input("\nChoisissez une classe (1-7) [d√©faut: Iop]: ").strip()
    if choice.isdigit() and 1 <= int(choice) <= len(classes):
        character_class = classes[int(choice) - 1]
    else:
        character_class = "Iop"

    print(f"\n‚úÖ Personnage cr√©√©: {name} ({character_class})")
    return name, character_class


def main():
    """Fonction principale"""
    print_banner()

    # Cr√©er les dossiers n√©cessaires
    Path("logs").mkdir(exist_ok=True)
    Path("data/autonomous_life").mkdir(parents=True, exist_ok=True)

    logger.info("üöÄ D√©marrage du Bot Autonome Incarn√©...")

    # Configuration interactive
    try:
        print("\n" + "=" * 60)
        print("CONFIGURATION DU BOT")
        print("=" * 60)

        # Cr√©er l'identit√©
        character_name, character_class = create_character_identity()

        # Configurer la personnalit√©
        personality = configure_personality()

        # === INITIALISATION DU BOT ===
        print("\nüß† Initialisation du moteur de vie autonome...")
        print("=" * 60)

        life_engine = create_autonomous_life_engine(
            character_name=character_name,
            character_class=character_class,
            personality_preset=personality
        )

        print("\n‚úÖ Moteur de vie initialis√©!")

        # === CALIBRATION (optionnelle) ===
        print("\nüéØ Calibration de la fen√™tre DOFUS")
        print("=" * 60)
        calibrate = input("Voulez-vous calibrer maintenant? (o/n) [d√©faut: non]: ").strip().lower()

        calibrator = None
        if calibrate == 'o':
            calibrator = DofusCalibrator()
            if not calibrator.calibrate():
                logger.warning("Calibration √©chou√©e, continuera sans calibration")

        # === BOUCLE DE VIE ===
        print("\nüåü Le bot prend vie!")
        print("=" * 60)
        print("\nCommandes disponibles:")
        print("  - 'story': Afficher l'histoire de vie")
        print("  - 'state': Afficher l'√©tat actuel")
        print("  - 'save': Sauvegarder l'√©tat")
        print("  - 'quit': Arr√™ter le bot")
        print("\nAppuyez sur Ctrl+C pour arr√™ter √† tout moment")
        print("=" * 60)

        # Game state
        game_state = create_game_state()

        # Statistiques
        frames_processed = 0
        start_time = time.time()
        last_story_time = time.time()

        # Boucle principale
        try:
            while True:
                frame_start = time.time()

                # === VIE DU BOT ===
                # Le bot vit un moment et d√©cide quoi faire
                decision_result = life_engine.live_moment(game_state)

                if decision_result:
                    # Afficher la d√©cision
                    logger.info(
                        f"üéØ D√©cision: {decision_result['action_type']} | "
                        f"Raison: {decision_result['reason']} | "
                        f"Confiance: {decision_result['confidence']:.2f}"
                    )

                    # TODO: Ex√©cuter l'action via le syst√®me d'actions
                    # Pour l'instant, simulation
                    time.sleep(0.1)

                    # Enregistrer le r√©sultat (simulation)
                    # En production, ce serait bas√© sur le vrai r√©sultat
                    outcome = "success" if decision_result['confidence'] > 0.6 else "neutral"
                    reward = decision_result['confidence'] - 0.5
                    life_engine.record_outcome(decision_result['decision_obj'], outcome, reward)

                # Afficher l'histoire de vie p√©riodiquement
                if time.time() - last_story_time > 300:  # Toutes les 5 minutes
                    print("\n" + life_engine.get_life_story())
                    last_story_time = time.time()

                frames_processed += 1

                # Dormir pour maintenir ~1 FPS (le bot "pense" lentement)
                elapsed = time.time() - frame_start
                sleep_time = max(0, 1.0 - elapsed)
                if sleep_time > 0:
                    time.sleep(sleep_time)

        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Arr√™t demand√© par l'utilisateur...")

        # === ARR√äT GRACIEUX ===
        print("\n" + "=" * 60)
        print("ARR√äT DU BOT")
        print("=" * 60)

        # Afficher l'histoire de vie finale
        print("\nüìñ HISTOIRE DE VIE FINALE:")
        print(life_engine.get_life_story())

        # Sauvegarder l'√©tat
        print("\nüíæ Sauvegarde de l'√©tat de vie...")
        life_engine.save_life_state()

        # Statistiques finales
        uptime = time.time() - start_time
        print(f"\nüìä STATISTIQUES DE SESSION:")
        print(f"   Temps de vie: {uptime/3600:.2f} heures")
        print(f"   Frames trait√©es: {frames_processed}")
        print(f"   D√©cisions prises: {life_engine.life_stats.total_decisions_made}")
        print(f"   Exp√©riences v√©cues: {life_engine.life_stats.total_experiences}")
        print(f"   Sessions d'apprentissage: {life_engine.life_stats.learning_sessions}")

        print("\n‚úÖ Bot arr√™t√© avec succ√®s")
        print("Au revoir! üëã")

    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}", exc_info=True)
        print(f"\n‚ùå Erreur: {e}")
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main())
