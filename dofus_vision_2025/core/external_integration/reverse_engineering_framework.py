"""
Framework de Reverse Engineering - DOFUS Unity World Model AI
Analyse et int√©gration d'applications externes (Ganymede, DOFUS Guide)
"""

import os
import json
import time
import psutil
import threading
import subprocess
from pathlib import Path
from typing import Dict, List, Tuple, Any, Optional
from dataclasses import dataclass, asdict
import socket
import struct
from datetime import datetime

# Pour l'analyse r√©seau
import scapy.all as scapy
from scapy.layers.inet import IP, TCP, UDP

# Pour l'interception Windows
try:
    import win32gui
    import win32process
    import win32api
    import win32con
except ImportError:
    print("‚ö†Ô∏è Modules Windows non disponibles - fonctionnalit√©s limit√©es")
    win32gui = None

@dataclass
class NetworkCapture:
    """Capture r√©seau d'une application"""
    timestamp: float
    source_ip: str
    dest_ip: str
    source_port: int
    dest_port: int
    protocol: str
    data_size: int
    payload: bytes
    decoded_payload: Optional[str] = None

@dataclass
class APIEndpoint:
    """Endpoint API d√©tect√©"""
    url: str
    method: str
    parameters: Dict[str, Any]
    response_format: str
    success_rate: float
    last_seen: float
    example_request: Optional[str] = None
    example_response: Optional[str] = None

@dataclass
class ApplicationProcess:
    """Processus d'application analys√©"""
    pid: int
    name: str
    executable_path: str
    command_line: str
    network_connections: List[Dict[str, Any]]
    open_files: List[str]
    memory_usage: int
    cpu_usage: float

class WindowsProcessAnalyzer:
    """Analyseur de processus Windows"""

    def __init__(self):
        self.target_processes = [
            "ganymede", "dofus_guide", "dofusguide",
            "dofus", "java", "electron", "chrome"
        ]

    def find_dofus_related_processes(self) -> List[ApplicationProcess]:
        """Trouve les processus li√©s √† DOFUS"""
        dofus_processes = []

        try:
            for proc in psutil.process_iter(['pid', 'name', 'exe', 'cmdline']):
                try:
                    process_info = proc.info
                    process_name = process_info['name'].lower() if process_info['name'] else ""

                    # V√©rifier si c'est un processus DOFUS/Ganymede/Guide
                    is_target = any(target in process_name for target in self.target_processes)

                    if is_target:
                        # Obtenir informations d√©taill√©es
                        try:
                            process = psutil.Process(proc.pid)

                            # Connexions r√©seau
                            connections = []
                            try:
                                for conn in process.connections():
                                    connections.append({
                                        "local_address": f"{conn.laddr.ip}:{conn.laddr.port}" if conn.laddr else "",
                                        "remote_address": f"{conn.raddr.ip}:{conn.raddr.port}" if conn.raddr else "",
                                        "status": conn.status,
                                        "family": conn.family.name,
                                        "type": conn.type.name
                                    })
                            except (psutil.AccessDenied, psutil.NoSuchProcess):
                                pass

                            # Fichiers ouverts
                            open_files = []
                            try:
                                for file in process.open_files():
                                    open_files.append(file.path)
                            except (psutil.AccessDenied, psutil.NoSuchProcess):
                                pass

                            app_process = ApplicationProcess(
                                pid=proc.pid,
                                name=process_info['name'] or "Unknown",
                                executable_path=process_info['exe'] or "",
                                command_line=" ".join(process_info['cmdline']) if process_info['cmdline'] else "",
                                network_connections=connections,
                                open_files=open_files,
                                memory_usage=process.memory_info().rss,
                                cpu_usage=process.cpu_percent()
                            )

                            dofus_processes.append(app_process)

                        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                            continue

                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue

        except Exception as e:
            print(f"‚ùå Erreur analyse processus: {e}")

        return dofus_processes

    def analyze_process_behavior(self, pid: int, duration: int = 60) -> Dict[str, Any]:
        """Analyse le comportement d'un processus sur une dur√©e"""
        print(f"üîç Analyse du processus PID {pid} pendant {duration}s...")

        behavior_data = {
            "pid": pid,
            "start_time": time.time(),
            "duration": duration,
            "network_activity": [],
            "file_activity": [],
            "memory_usage": [],
            "cpu_usage": [],
            "api_calls_detected": []
        }

        try:
            process = psutil.Process(pid)
            start_time = time.time()

            while (time.time() - start_time) < duration:
                try:
                    # M√©triques syst√®me
                    memory_info = process.memory_info()
                    cpu_percent = process.cpu_percent()

                    behavior_data["memory_usage"].append({
                        "timestamp": time.time(),
                        "rss": memory_info.rss,
                        "vms": memory_info.vms
                    })

                    behavior_data["cpu_usage"].append({
                        "timestamp": time.time(),
                        "cpu_percent": cpu_percent
                    })

                    # Connexions r√©seau
                    current_connections = []
                    for conn in process.connections():
                        if conn.raddr:  # Connexion √©tablie
                            conn_info = {
                                "timestamp": time.time(),
                                "remote_ip": conn.raddr.ip,
                                "remote_port": conn.raddr.port,
                                "status": conn.status,
                                "protocol": conn.type.name
                            }
                            current_connections.append(conn_info)

                    behavior_data["network_activity"].extend(current_connections)

                    time.sleep(2)  # √âchantillonnage toutes les 2 secondes

                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    break

        except Exception as e:
            print(f"‚ùå Erreur analyse comportement: {e}")

        return behavior_data

class NetworkTrafficAnalyzer:
    """Analyseur de trafic r√©seau"""

    def __init__(self):
        self.captured_packets: List[NetworkCapture] = []
        self.api_endpoints: Dict[str, APIEndpoint] = {}
        self.is_capturing = False
        self.capture_thread: Optional[threading.Thread] = None

    def start_network_capture(self, interface: str = None, filter_ports: List[int] = None):
        """D√©marre la capture r√©seau"""
        if self.is_capturing:
            print("‚ö†Ô∏è Capture d√©j√† en cours")
            return

        self.is_capturing = True

        # Ports typiques des applications web/API
        if not filter_ports:
            filter_ports = [80, 443, 8080, 8443, 3000, 5000, 9000]

        # Cr√©er filtre Scapy
        port_filter = " or ".join([f"port {port}" for port in filter_ports])
        scapy_filter = f"tcp and ({port_filter})"

        print(f"üîç D√©marrage capture r√©seau avec filtre: {scapy_filter}")

        def capture_packets():
            try:
                scapy.sniff(
                    iface=interface,
                    filter=scapy_filter,
                    prn=self._process_packet,
                    stop_filter=lambda p: not self.is_capturing
                )
            except Exception as e:
                print(f"‚ùå Erreur capture r√©seau: {e}")
                self.is_capturing = False

        self.capture_thread = threading.Thread(target=capture_packets, daemon=True)
        self.capture_thread.start()

    def _process_packet(self, packet):
        """Traite un paquet captur√©"""
        try:
            if packet.haslayer(TCP) and packet.haslayer(IP):
                # Extraire informations
                ip_layer = packet[IP]
                tcp_layer = packet[TCP]

                # Payload
                payload = bytes(tcp_layer.payload) if tcp_layer.payload else b""

                capture = NetworkCapture(
                    timestamp=time.time(),
                    source_ip=ip_layer.src,
                    dest_ip=ip_layer.dst,
                    source_port=tcp_layer.sport,
                    dest_port=tcp_layer.dport,
                    protocol="TCP",
                    data_size=len(payload),
                    payload=payload
                )

                # D√©coder payload si possible
                try:
                    capture.decoded_payload = payload.decode('utf-8', errors='ignore')
                except:
                    pass

                self.captured_packets.append(capture)

                # D√©tecter patterns API
                self._detect_api_patterns(capture)

                # Limiter taille du cache
                if len(self.captured_packets) > 10000:
                    self.captured_packets = self.captured_packets[-5000:]

        except Exception as e:
            print(f"‚ùå Erreur traitement paquet: {e}")

    def _detect_api_patterns(self, capture: NetworkCapture):
        """D√©tecte les patterns d'API dans le trafic"""
        if not capture.decoded_payload:
            return

        payload = capture.decoded_payload

        # D√©tecter requ√™tes HTTP
        if any(method in payload for method in ["GET ", "POST ", "PUT ", "DELETE "]):
            self._analyze_http_request(capture, payload)

        # D√©tecter r√©ponses JSON
        if payload.strip().startswith('{') and payload.strip().endswith('}'):
            self._analyze_json_response(capture, payload)

    def _analyze_http_request(self, capture: NetworkCapture, payload: str):
        """Analyse une requ√™te HTTP"""
        try:
            lines = payload.split('\n')
            if not lines:
                return

            # Parse premi√®re ligne (m√©thode + URL)
            request_line = lines[0].strip()
            parts = request_line.split(' ')

            if len(parts) >= 3:
                method = parts[0]
                url = parts[1]
                host = capture.dest_ip

                # Extraire host des headers si possible
                for line in lines[1:]:
                    if line.lower().startswith('host:'):
                        host = line.split(':', 1)[1].strip()
                        break

                full_url = f"http://{host}{url}"

                # Cr√©er ou mettre √† jour endpoint
                endpoint_key = f"{method}:{full_url}"

                if endpoint_key not in self.api_endpoints:
                    self.api_endpoints[endpoint_key] = APIEndpoint(
                        url=full_url,
                        method=method,
                        parameters={},
                        response_format="unknown",
                        success_rate=1.0,
                        last_seen=capture.timestamp,
                        example_request=payload[:500]  # Premi√®re partie seulement
                    )
                else:
                    self.api_endpoints[endpoint_key].last_seen = capture.timestamp

        except Exception as e:
            print(f"‚ùå Erreur analyse requ√™te HTTP: {e}")

    def _analyze_json_response(self, capture: NetworkCapture, payload: str):
        """Analyse une r√©ponse JSON"""
        try:
            # Essayer de parser le JSON
            json_data = json.loads(payload.strip())

            # Chercher l'endpoint correspondant (requ√™te r√©cente)
            recent_endpoints = [
                ep for ep in self.api_endpoints.values()
                if (capture.timestamp - ep.last_seen) < 5.0  # 5 secondes
            ]

            if recent_endpoints:
                # Associer √† l'endpoint le plus r√©cent
                endpoint = recent_endpoints[-1]
                endpoint.response_format = "json"
                if not endpoint.example_response:
                    endpoint.example_response = payload[:500]

        except json.JSONDecodeError:
            pass  # Pas du JSON valide
        except Exception as e:
            print(f"‚ùå Erreur analyse JSON: {e}")

    def stop_network_capture(self):
        """Arr√™te la capture r√©seau"""
        if not self.is_capturing:
            return

        self.is_capturing = False
        if self.capture_thread:
            self.capture_thread.join(timeout=5)

        print(f"‚èπÔ∏è Capture arr√™t√©e - {len(self.captured_packets)} paquets captur√©s")

    def get_detected_apis(self) -> Dict[str, APIEndpoint]:
        """Retourne les APIs d√©tect√©es"""
        return self.api_endpoints

    def export_capture_data(self, output_dir: str) -> str:
        """Exporte les donn√©es de capture"""
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        # Exporter paquets
        packets_file = output_path / f"network_capture_{timestamp}.json"
        packets_data = [asdict(packet) for packet in self.captured_packets[-1000:]]  # 1000 derniers

        # Encoder bytes en base64 pour JSON
        for packet_data in packets_data:
            if packet_data['payload']:
                import base64
                packet_data['payload'] = base64.b64encode(packet_data['payload']).decode('ascii')

        with open(packets_file, 'w', encoding='utf-8') as f:
            json.dump(packets_data, f, indent=2, ensure_ascii=False)

        # Exporter APIs
        apis_file = output_path / f"detected_apis_{timestamp}.json"
        apis_data = {key: asdict(endpoint) for key, endpoint in self.api_endpoints.items()}

        with open(apis_file, 'w', encoding='utf-8') as f:
            json.dump(apis_data, f, indent=2, ensure_ascii=False)

        print(f"üìÅ Donn√©es export√©es vers {output_path}")
        return str(output_path)

class ReverseEngineeringOrchestrator:
    """Orchestrateur principal du reverse engineering"""

    def __init__(self, output_dir: str = "reverse_engineering_data"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)

        self.process_analyzer = WindowsProcessAnalyzer()
        self.network_analyzer = NetworkTrafficAnalyzer()

        # R√©sultats
        self.discovered_processes: List[ApplicationProcess] = []
        self.analysis_sessions: Dict[str, Dict[str, Any]] = {}

    def discover_target_applications(self) -> List[ApplicationProcess]:
        """D√©couvre les applications cibles (Ganymede, DOFUS Guide, etc.)"""
        print("üîç Recherche d'applications DOFUS...")

        processes = self.process_analyzer.find_dofus_related_processes()
        self.discovered_processes = processes

        if processes:
            print(f"‚úÖ {len(processes)} processus trouv√©s:")
            for proc in processes:
                print(f"  - {proc.name} (PID: {proc.pid})")
                print(f"    Path: {proc.executable_path}")
                print(f"    Connexions: {len(proc.network_connections)}")
        else:
            print("‚ùå Aucun processus DOFUS trouv√©")

        return processes

    def analyze_application(self, process: ApplicationProcess,
                          capture_duration: int = 120) -> Dict[str, Any]:
        """Analyse compl√®te d'une application"""
        session_id = f"{process.name}_{process.pid}_{int(time.time())}"

        print(f"üî¨ Analyse de {process.name} (PID: {process.pid})...")

        analysis_data = {
            "session_id": session_id,
            "process_info": asdict(process),
            "start_time": time.time(),
            "behavior_analysis": {},
            "network_capture": {},
            "discovered_apis": {},
            "recommendations": []
        }

        try:
            # D√©marrer capture r√©seau
            print("üì° D√©marrage capture r√©seau...")
            self.network_analyzer.start_network_capture()

            # Analyser comportement processus
            print("üìä Analyse comportement processus...")
            behavior = self.process_analyzer.analyze_process_behavior(
                process.pid, capture_duration
            )
            analysis_data["behavior_analysis"] = behavior

            # Attendre fin capture
            time.sleep(capture_duration)

            # Arr√™ter capture r√©seau
            self.network_analyzer.stop_network_capture()

            # R√©cup√©rer APIs d√©couvertes
            discovered_apis = self.network_analyzer.get_detected_apis()
            analysis_data["discovered_apis"] = {
                key: asdict(endpoint) for key, endpoint in discovered_apis.items()
            }

            analysis_data["network_capture"] = {
                "total_packets": len(self.network_analyzer.captured_packets),
                "apis_found": len(discovered_apis),
                "capture_duration": capture_duration
            }

            # G√©n√©rer recommandations
            analysis_data["recommendations"] = self._generate_integration_recommendations(
                process, discovered_apis
            )

            # Sauvegarder session
            self.analysis_sessions[session_id] = analysis_data
            self._save_analysis_session(session_id, analysis_data)

            print(f"‚úÖ Analyse termin√©e - Session: {session_id}")
            print(f"üìä APIs d√©couvertes: {len(discovered_apis)}")

            return analysis_data

        except Exception as e:
            print(f"‚ùå Erreur analyse: {e}")
            analysis_data["error"] = str(e)
            return analysis_data

    def _generate_integration_recommendations(self, process: ApplicationProcess,
                                            apis: Dict[str, APIEndpoint]) -> List[str]:
        """G√©n√®re des recommandations d'int√©gration"""
        recommendations = []

        # Analyser les APIs trouv√©es
        if apis:
            recommendations.append(f"üîó {len(apis)} endpoints API d√©tect√©s - int√©gration possible")

            # Recommandations sp√©cifiques par type d'endpoint
            for endpoint in apis.values():
                if 'dofus' in endpoint.url.lower():
                    recommendations.append(f"üìä Endpoint DOFUS d√©tect√©: {endpoint.url}")

                if endpoint.response_format == 'json':
                    recommendations.append(f"üìÑ API JSON: {endpoint.method} {endpoint.url}")

        # Analyser les connexions r√©seau
        if process.network_connections:
            external_connections = [
                conn for conn in process.network_connections
                if not conn['remote_address'].startswith('127.0.0.1')
            ]

            if external_connections:
                recommendations.append(
                    f"üåê {len(external_connections)} connexions externes d√©tect√©es"
                )

        # Analyser les fichiers ouverts
        if process.open_files:
            config_files = [f for f in process.open_files if any(ext in f.lower() for ext in ['.json', '.xml', '.config', '.ini'])]

            if config_files:
                recommendations.append(
                    f"‚öôÔ∏è {len(config_files)} fichiers de configuration d√©tect√©s"
                )

        if not recommendations:
            recommendations.append("‚ùì Aucune int√©gration √©vidente d√©tect√©e - analyse manuelle recommand√©e")

        return recommendations

    def _save_analysis_session(self, session_id: str, data: Dict[str, Any]):
        """Sauvegarde une session d'analyse"""
        try:
            session_dir = self.output_dir / session_id
            session_dir.mkdir(exist_ok=True)

            # Sauvegarder m√©tadonn√©es
            metadata_file = session_dir / "analysis_metadata.json"
            with open(metadata_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False, default=str)

            # Exporter donn√©es de capture r√©seau
            if hasattr(self.network_analyzer, 'captured_packets'):
                self.network_analyzer.export_capture_data(str(session_dir))

            print(f"üíæ Session sauvegard√©e: {session_dir}")

        except Exception as e:
            print(f"‚ùå Erreur sauvegarde: {e}")

    def generate_integration_guide(self, session_id: str) -> str:
        """G√©n√®re un guide d'int√©gration bas√© sur l'analyse"""
        if session_id not in self.analysis_sessions:
            return "Session introuvable"

        data = self.analysis_sessions[session_id]
        process_info = data["process_info"]

        guide = f"""
# Guide d'Int√©gration - {process_info['name']}

## Informations Processus
- **Nom**: {process_info['name']}
- **PID**: {process_info['pid']}
- **Chemin**: {process_info['executable_path']}
- **Ligne de commande**: {process_info['command_line']}

## APIs D√©couvertes
"""

        apis = data.get("discovered_apis", {})
        if apis:
            guide += f"**{len(apis)} endpoints d√©tect√©s:**\n\n"
            for key, endpoint in apis.items():
                guide += f"- **{endpoint['method']}** `{endpoint['url']}`\n"
                guide += f"  - Format: {endpoint['response_format']}\n"
                guide += f"  - Derni√®re activit√©: {datetime.fromtimestamp(endpoint['last_seen']).strftime('%H:%M:%S')}\n\n"
        else:
            guide += "Aucune API d√©tect√©e.\n\n"

        guide += "## Recommandations d'Int√©gration\n\n"
        for recommendation in data.get("recommendations", []):
            guide += f"- {recommendation}\n"

        guide += f"""

## M√©triques d'Analyse
- **Dur√©e**: {data.get('behavior_analysis', {}).get('duration', 0)}s
- **Paquets captur√©s**: {data.get('network_capture', {}).get('total_packets', 0)}
- **Connexions r√©seau**: {len(process_info.get('network_connections', []))}
- **Fichiers ouverts**: {len(process_info.get('open_files', []))}

## Prochaines √âtapes
1. Analyser les endpoints d√©couverts manuellement
2. Tester les APIs avec des outils comme Postman
3. Impl√©menter des connecteurs sp√©cifiques
4. Mettre en place la surveillance des changements
"""

        # Sauvegarder le guide
        try:
            guide_file = self.output_dir / session_id / "integration_guide.md"
            with open(guide_file, 'w', encoding='utf-8') as f:
                f.write(guide)
            print(f"üìñ Guide g√©n√©r√©: {guide_file}")
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration guide: {e}")

        return guide

# Factory function
def get_reverse_engineering_framework(output_dir: str = "reverse_engineering_data") -> ReverseEngineeringOrchestrator:
    """Factory pour le framework de reverse engineering"""
    return ReverseEngineeringOrchestrator(output_dir)

if __name__ == "__main__":
    # Test du framework
    print("üîß Framework de Reverse Engineering DOFUS")
    print("=" * 50)

    orchestrator = get_reverse_engineering_framework()

    # D√©couvrir applications
    processes = orchestrator.discover_target_applications()

    if processes:
        print(f"\\nAnalyse du premier processus trouv√©: {processes[0].name}")
        print("‚ö†Ô∏è Ceci va capturer le trafic r√©seau pendant 30 secondes...")

        try:
            analysis = orchestrator.analyze_application(processes[0], capture_duration=30)
            print(f"‚úÖ Analyse termin√©e - Session: {analysis['session_id']}")

            # G√©n√©rer guide
            guide = orchestrator.generate_integration_guide(analysis['session_id'])
            print("\\nüìñ Guide d'int√©gration g√©n√©r√©")

        except KeyboardInterrupt:
            print("\\n‚èπÔ∏è Analyse interrompue")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")

    else:
        print("\\n‚ö†Ô∏è Aucun processus cible trouv√©")
        print("Assurez-vous qu'une application DOFUS/Ganymede est en cours d'ex√©cution")