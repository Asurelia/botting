"""
Module d'automatisation avanc√©e des m√©tiers pour DOFUS.
Syst√®me complet avec IA, ML et optimisation multi-personnages.

Ce module fournit:
- Farming intelligent multi-zones avec pr√©diction respawn
- Craft automatique avec calcul rentabilit√© temps r√©el  
- Optimisation XP/Kamas selon march√© actuel
- Pr√©diction respawn ressources avec ML
- Planification sessions m√©tiers optimales

Fonctionnalit√©s avanc√©es:
- Pr√©diction ML des temps de respawn
- Routes dynamiques selon affluence zones
- Calcul rentabilit√© temps r√©el via scan HDV
- Changement automatique m√©tier selon objectifs
- Gestion stocks inter-personnages
- Craft en masse avec optimisation mat√©riaux
- D√©tection concurrence sur zones
- Mode furtif zones bond√©es
- Alertes ressources rares
- Export statistiques d√©taill√©es

Int√©gration compl√®te avec le syst√®me existant.
"""

from .advanced_farming import (
    AdvancedFarmer,
    FarmingStrategy,
    ZoneStatus,
    ZoneData,
    HarvestSession
)

from .craft_automation import (
    CraftAutomation,
    CraftPriority,
    CraftComplexity,
    RecipeData,
    CraftSession,
    MarketData
)

from .profession_optimizer import (
    ProfessionOptimizer,
    OptimizationGoal,
    TimeHorizon,
    OptimizationConstraint,
    ActivityRecommendation,
    OptimizationResult,
    MarketOpportunity
)

from .resource_predictor import (
    ResourcePredictor,
    PredictionModel,
    PredictionConfidence,
    ResourceObservation,
    PredictionResult,
    ResourcePattern
)

from .profession_scheduler import (
    ProfessionScheduler,
    SchedulePriority,
    SessionType,
    CharacterStatus,
    Character,
    ScheduledTask,
    Schedule,
    SchedulingConstraint
)

# Version du module
__version__ = "1.0.0"

# Auteur et m√©tadonn√©es
__author__ = "Claude Code & Anthropic"
__description__ = "Syst√®me d'automatisation avanc√©e des m√©tiers DOFUS avec IA et ML"
__status__ = "Stable"

# Classes principales export√©es
__all__ = [
    # Advanced Farming
    "AdvancedFarmer",
    "FarmingStrategy", 
    "ZoneStatus",
    "ZoneData",
    "HarvestSession",
    
    # Craft Automation
    "CraftAutomation",
    "CraftPriority",
    "CraftComplexity", 
    "RecipeData",
    "CraftSession",
    "MarketData",
    
    # Profession Optimizer
    "ProfessionOptimizer",
    "OptimizationGoal",
    "TimeHorizon",
    "OptimizationConstraint",
    "ActivityRecommendation",
    "OptimizationResult",
    "MarketOpportunity",
    
    # Resource Predictor
    "ResourcePredictor",
    "PredictionModel",
    "PredictionConfidence",
    "ResourceObservation", 
    "PredictionResult",
    "ResourcePattern",
    
    # Profession Scheduler
    "ProfessionScheduler",
    "SchedulePriority",
    "SessionType",
    "CharacterStatus",
    "Character",
    "ScheduledTask",
    "Schedule",
    "SchedulingConstraint"
]


def get_module_info():
    """Retourne les informations du module"""
    return {
        "name": "professions_advanced",
        "version": __version__,
        "author": __author__, 
        "description": __description__,
        "status": __status__,
        "components": [
            {
                "name": "AdvancedFarmer",
                "description": "Farming intelligent multi-zones avec pr√©diction respawn et strat√©gies adaptatives",
                "features": [
                    "Pr√©diction ML des respawns",
                    "Routes dynamiques optimis√©es", 
                    "D√©tection et √©vitement de concurrence",
                    "Modes stealth et comp√©titif",
                    "Analyse performance temps r√©el"
                ]
            },
            {
                "name": "CraftAutomation", 
                "description": "Craft automatique avec analyse de march√© et optimisation rentabilit√©",
                "features": [
                    "Calcul rentabilit√© temps r√©el",
                    "Int√©gration donn√©es HDV",
                    "Optimisation ordre de craft",
                    "Gestion intelligente stocks",
                    "Rapports de performance d√©taill√©s"
                ]
            },
            {
                "name": "ProfessionOptimizer",
                "description": "Optimiseur multi-objectifs XP/Kamas avec contraintes",
                "features": [
                    "Optimisation multi-objectifs",
                    "Analyse opportunit√©s march√©",
                    "Gestion contraintes complexes", 
                    "Recommandations adaptatives",
                    "Strat√©gies alternatives"
                ]
            },
            {
                "name": "ResourcePredictor",
                "description": "Pr√©dicteur de respawn avec Machine Learning",
                "features": [
                    "Mod√®les ML avanc√©s (RF, GB, NN)",
                    "Apprentissage adaptatif",
                    "D√©tection patterns temporels",
                    "Pr√©dictions avec intervalles confiance",
                    "Validation et auto-am√©lioration"
                ]
            },
            {
                "name": "ProfessionScheduler",
                "description": "Planificateur optimal multi-personnages avec synergies",
                "features": [
                    "Planification multi-personnages",
                    "D√©tection synergies inter-m√©tiers",
                    "R√©solution conflits automatique",
                    "Optimisation temporelle globale",
                    "Gestion contraintes complexes"
                ]
            }
        ]
    }


def create_full_automation_system(base_farmer=None, market_analyzer=None, 
                                profession_manager=None, pathfinder=None,
                                detector=None, anti_detection=None):
    """
    Cr√©e un syst√®me d'automatisation complet int√©gr√©.
    
    Args:
        base_farmer: Instance Farmer de base
        market_analyzer: Analyseur de march√©
        profession_manager: Gestionnaire de m√©tiers
        pathfinder: Syst√®me de navigation
        detector: D√©tecteur de ressources
        anti_detection: Syst√®me anti-d√©tection
        
    Returns:
        Dict contenant tous les composants du syst√®me
    """
    
    # Cr√©ation des composants principaux
    components = {}
    
    # Resource Predictor (ind√©pendant)
    components['predictor'] = ResourcePredictor(PredictionModel.ENSEMBLE)
    
    # Profession Optimizer (n√©cessite market_analyzer)
    if profession_manager and market_analyzer:
        components['optimizer'] = ProfessionOptimizer(profession_manager, market_analyzer)
    
    # Advanced Farmer (n√©cessite plusieurs d√©pendances)
    if base_farmer and pathfinder and detector and anti_detection:
        components['farmer'] = AdvancedFarmer(base_farmer, pathfinder, detector, anti_detection)
    
    # Craft Automation (n√©cessite market_analyzer)
    if market_analyzer:
        # Utilise base_farmer comme profession si disponible, sinon None
        components['crafter'] = CraftAutomation(base_farmer, market_analyzer)
    
    # Profession Scheduler (syst√®me central)
    if 'optimizer' in components and 'predictor' in components:
        components['scheduler'] = ProfessionScheduler(
            components['optimizer'],
            components['predictor'],
            components.get('farmer'),
            components.get('crafter')
        )
    
    print(f"üèóÔ∏è Syst√®me d'automatisation cr√©√© avec {len(components)} composants")
    
    return components


# Fonctions utilitaires pour l'int√©gration
def validate_system_dependencies():
    """Valide que toutes les d√©pendances sont disponibles"""
    dependencies = {
        'numpy': True,
        'pandas': True, 
        'scikit-learn': False,  # Optionnel
        'asyncio': True
    }
    
    try:
        import numpy
        import pandas
        import asyncio
        dependencies['numpy'] = True
        dependencies['pandas'] = True
        dependencies['asyncio'] = True
    except ImportError as e:
        print(f"‚ö†Ô∏è D√©pendance manquante: {e}")
        return False
    
    try:
        import sklearn
        dependencies['scikit-learn'] = True
        print("‚úÖ scikit-learn disponible - Mod√®les ML activ√©s")
    except ImportError:
        print("‚ö†Ô∏è scikit-learn non disponible - Utilisation mod√®les simplifi√©s")
    
    return True


# Initialisation du module
if __name__ != "__main__":
    print(f"üìö Module professions_advanced v{__version__} charg√©")
    print("   Fonctionnalit√©s disponibles:")
    print("   - Farming intelligent multi-zones")
    print("   - Craft automatique avec rentabilit√©")
    print("   - Optimisation XP/Kamas temps r√©el")
    print("   - Pr√©diction ML respawn ressources")
    print("   - Planification sessions optimales")
    print("   - Gestion multi-personnages")
    
    # Validation des d√©pendances
    if validate_system_dependencies():
        print("‚úÖ Toutes les d√©pendances sont satisfaites")
    else:
        print("‚ö†Ô∏è Certaines d√©pendances manquent - Fonctionnalit√©s limit√©es")
else:
    # Mode d√©monstration si ex√©cut√© directement
    import asyncio
    
    async def demo_complete_system():
        """D√©monstration du syst√®me complet"""
        print("üöÄ D√©monstration syst√®me d'automatisation avanc√©e DOFUS")
        
        # Cr√©er syst√®me basique sans d√©pendances
        system = create_full_automation_system()
        
        if system:
            print(f"‚úÖ Syst√®me cr√©√© avec {len(system)} composants")
            
            # Test rapide de chaque composant
            for name, component in system.items():
                print(f"   - {name}: {type(component).__name__} ‚úÖ")
        
        print("\nüìñ Pour utilisation compl√®te, int√©grer avec:")
        print("   from modules.professions_advanced import *")
        print("   system = create_full_automation_system(...)")
    
    asyncio.run(demo_complete_system())