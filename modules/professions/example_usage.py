"""
Exemple d'utilisation du syst√®me de m√©tiers complet.
D√©montre toutes les fonctionnalit√©s principales des modules de professions.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from modules.professions import (
    ProfessionManager, OptimizationStrategy,
    Farmer, Lumberjack, Miner, Alchemist
)

def demo_individual_professions():
    """D√©monstration des m√©tiers individuels"""
    print("=" * 60)
    print("D√âMONSTRATION DES M√âTIERS INDIVIDUELS")
    print("=" * 60)
    
    # === FERMIER ===
    print("\nüåæ FERMIER")
    print("-" * 40)
    farmer = Farmer()
    print(f"M√©tier: {farmer}")
    
    # Meilleures ressources niveau d√©butant
    best_farming = farmer.get_best_resources_by_level(15, 3)
    print(f"\nMeilleures ressources niveau 15:")
    for resource in best_farming:
        profit = farmer.calculate_profitability(resource.id)
        print(f"  ‚Ä¢ {resource.name} (Niv.{resource.level_required}): "
              f"{profit['kamas_per_hour']:.0f} kamas/h, {profit['xp_per_hour']:.0f} XP/h")
    
    # Route optimis√©e
    route = farmer.get_optimal_route((1, 20))
    print(f"\nRoute optimis√©e (niveaux 1-20): {len(route)} ressources")
    pattern = farmer.get_farming_pattern(route[:5], 'cluster')
    print(f"Pattern de farming: cluster sur {len(pattern)} coordonn√©es")
    
    # === B√õCHERON ===
    print("\nü™ì B√õCHERON")
    print("-" * 40)
    lumberjack = Lumberjack()
    print(f"M√©tier: {lumberjack}")
    
    # Am√©lioration d'outil
    tool_recs = lumberjack.get_tool_recommendations()
    print(f"\nRecommandations d'outils: {len(tool_recs)}")
    for tool, rec in list(tool_recs.items())[:2]:
        if rec['recommended']:
            print(f"  ‚Ä¢ {tool}: +{rec['improvement_percent']:.1f}% efficacit√©")
    
    # Pattern de coupe
    trees = lumberjack.get_available_resources((20, 40))
    cutting_pattern = lumberjack.get_cutting_pattern(trees[:8], 'sustainable')
    print(f"\nPattern durable: {cutting_pattern['strategy']}")
    print(f"Ressources s√©lectionn√©es: {len(cutting_pattern['resources'])}")
    
    # === MINEUR ===
    print("\n‚õèÔ∏è MINEUR")
    print("-" * 40)
    miner = Miner()
    print(f"M√©tier: {miner}")
    
    # Strat√©gie gemmes
    gem_strategy = miner.get_gem_hunting_strategy()
    if 'recommended_gems' in gem_strategy:
        print(f"\nStrat√©gie gemmes: {len(gem_strategy['recommended_gems'])} gemmes recommand√©es")
        print(f"Profit quotidien estim√©: {gem_strategy['estimated_daily_profit']:.0f} kamas")
        print(f"‚ö†Ô∏è  {gem_strategy['warning']}")
    
    # Analyse de d√©pletion
    common_ores = ['fer', 'cuivre', 'bronze']
    depletion = miner.estimate_forest_depletion(common_ores)
    print(f"\nAnalyse de d√©pletion des minerais communs:")
    for ore_id, data in depletion.items():
        if data['sustainable']:
            print(f"  ‚Ä¢ {ore_id}: Exploitation durable ‚úì")
        else:
            print(f"  ‚Ä¢ {ore_id}: D√©pletion temporaire de {data['depletion_time_minutes']:.1f}min")
    
    # === ALCHIMISTE ===
    print("\n‚öóÔ∏è ALCHIMISTE")
    print("-" * 40)
    alchemist = Alchemist()
    print(f"M√©tier: {alchemist}")
    
    # Session de crafting
    session_estimate = alchemist.estimate_crafting_session('potion_soin_moyenne', 20, 2.0)
    print(f"\nSession de crafting '{session_estimate['recipe_name']}':")
    print(f"  Objectif: {session_estimate['target_quantity']} potions")
    print(f"  R√©alisable: {session_estimate['achievable_quantity']} potions")
    print(f"  Temps: {session_estimate['session_time_hours']}h")
    print(f"  Profit: {session_estimate['total_profit']:.0f} kamas")
    print(f"  Rentabilit√©: {session_estimate['profitability_rating']}")
    
    # Gestion des ingr√©dients
    recipes_to_craft = ['potion_soin_legere', 'potion_mana_mineure']
    ingredient_mgmt = alchemist.manage_ingredient_stock(recipes_to_craft, 3.0)
    print(f"\nGestion ingr√©dients pour {ingredient_mgmt['total_recipes']} recettes:")
    print(f"  Co√ªt total: {ingredient_mgmt['total_shopping_cost']:.0f} kamas")
    print(f"  Articles √† acheter: {len(ingredient_mgmt['shopping_list'])}")
    print(f"  Articles √† r√©colter: {len(ingredient_mgmt['harvesting_list'])}")

def demo_profession_manager():
    """D√©monstration du gestionnaire de m√©tiers"""
    print("\n" + "=" * 60)
    print("GESTIONNAIRE GLOBAL DE M√âTIERS")
    print("=" * 60)
    
    # Initialisation
    manager = ProfessionManager()
    print(f"Gestionnaire initialis√©: {manager}")
    
    # Statistiques globales
    global_stats = manager.get_global_statistics()
    print(f"\nüìä STATISTIQUES GLOBALES")
    print("-" * 40)
    summary = global_stats['profession_summary']
    print(f"Niveau total: {summary['total_levels']}")
    print(f"Niveau moyen: {summary['average_level']}")
    print(f"Ressources disponibles: {summary['available_resources']}/{summary['total_resources']}")
    
    print(f"\nD√©tails par m√©tier:")
    for name, details in global_stats['profession_details'].items():
        print(f"  ‚Ä¢ {name.title()}: Niv.{details['level']} - "
              f"{details['kamas_earned']} kamas - "
              f"Efficacit√©: {details['efficiency_rating']}")
    
    print(f"\nRecommandations ({len(global_stats['recommendations'])}):")
    for i, rec in enumerate(global_stats['recommendations'], 1):
        print(f"  {i}. {rec}")
    
    # Comparaison des strat√©gies
    print(f"\nüéØ COMPARAISON DES STRAT√âGIES")
    print("-" * 40)
    strategy_comparison = manager.compare_strategies(4.0)
    
    print(f"Analyse sur {strategy_comparison['comparison_duration_hours']}h:")
    comparison = strategy_comparison['detailed_comparison']
    
    for strategy, data in comparison.items():
        print(f"\n{strategy.replace('_', ' ').title()}:")
        print(f"  XP total: {data['total_xp']:,.0f}")
        print(f"  Kamas total: {data['total_kamas']:,.0f}")
        print(f"  XP/h: {data['avg_xp_per_hour']:,.0f}")
        print(f"  Kamas/h: {data['avg_kamas_per_hour']:,.0f}")
    
    recs = strategy_comparison['recommendations']
    print(f"\nüèÜ RECOMMANDATIONS:")
    print(f"  Meilleure pour XP: {recs['best_for_xp'].replace('_', ' ').title()}")
    print(f"  Meilleure pour Kamas: {recs['best_for_kamas'].replace('_', ' ').title()}")
    print(f"  √âcart XP: {recs['xp_difference_percent']}%")
    print(f"  √âcart Kamas: {recs['kamas_difference_percent']}%")
    
    # Optimisation et ex√©cution d'une session
    print(f"\nüöÄ SESSION OPTIMIS√âE")
    print("-" * 40)
    
    # Session profit-focused
    optimal_session = manager.optimize_global_session(3.0, OptimizationStrategy.PROFIT_FOCUSED)
    print(f"Session optimis√©e: {optimal_session.strategy.value}")
    print(f"Dur√©e: {optimal_session.duration_hours}h")
    
    print(f"\nAllocation du temps:")
    for prof, allocation in optimal_session.profession_allocation.items():
        time_hours = allocation * optimal_session.duration_hours
        print(f"  ‚Ä¢ {prof.title()}: {time_hours:.1f}h ({allocation*100:.1f}%)")
    
    print(f"\nR√©sultats attendus:")
    expected_totals = optimal_session.expected_results['totals']
    print(f"  XP total: {expected_totals['total_xp']:,.0f}")
    print(f"  Kamas total: {expected_totals['total_kamas']:,.0f}")
    if 'profit_optimization_bonus' in expected_totals:
        print(f"  Bonus optimisation: {expected_totals['profit_optimization_bonus']:.1f}x")
    
    # Simulation d'ex√©cution
    print(f"\n‚ö° EX√âCUTION SIMUL√âE")
    print("-" * 40)
    execution_results = manager.execute_session(optimal_session)
    
    session_summary = execution_results['session_summary']
    totals = execution_results['totals']
    performance = execution_results['performance']
    
    print(f"Strat√©gie ex√©cut√©e: {session_summary['strategy']}")
    print(f"Temps d'ex√©cution: {session_summary['execution_time_seconds']}s")
    
    print(f"\nR√©sultats obtenus:")
    print(f"  XP gagn√©e: {totals['total_xp_gained']:,.0f} ({totals['average_xp_per_hour']:,.0f}/h)")
    print(f"  Kamas gagn√©s: {totals['total_kamas_gained']:,.0f} ({totals['average_kamas_per_hour']:,.0f}/h)")
    
    print(f"\nPerformance vs pr√©dictions:")
    print(f"  XP: {performance['vs_expected_xp']}% de l'attendu")
    print(f"  Kamas: {performance['vs_expected_kamas']}% de l'attendu")
    
    if performance['new_records']['xp'] or performance['new_records']['kamas']:
        records = []
        if performance['new_records']['xp']:
            records.append("XP/h")
        if performance['new_records']['kamas']:
            records.append("Kamas/h")
        print(f"  üéâ Nouveau record: {' et '.join(records)}!")
    
    print(f"\nD√©tails par m√©tier:")
    for prof_name, results in execution_results['results_by_profession'].items():
        print(f"  ‚Ä¢ {prof_name.title()}: "
              f"+{results['xp_gained']:,} XP, "
              f"+{results['kamas_gained']:,} kamas, "
              f"Niv.{results['new_level']}")
    
    # Sauvegarde
    manager.save_configuration()
    print(f"\nüíæ Configuration sauvegard√©e")

def demo_advanced_features():
    """D√©monstration des fonctionnalit√©s avanc√©es"""
    print("\n" + "=" * 60)
    print("FONCTIONNALIT√âS AVANC√âES")
    print("=" * 60)
    
    # Synergies entre m√©tiers
    manager = ProfessionManager()
    
    print(f"\nüîó SYNERGIES ENTRE M√âTIERS")
    print("-" * 40)
    synergy_session = manager.optimize_global_session(2.0, OptimizationStrategy.SYNERGY)
    
    if synergy_session.synergies_used:
        print(f"Synergies exploit√©es: {len(synergy_session.synergies_used)}")
        for synergy in synergy_session.synergies_used[:3]:  # Top 3
            print(f"  ‚Ä¢ {synergy.profession1.title()} ‚Üí {synergy.profession2.title()}: "
                  f"{synergy.efficiency_bonus:.1f}x bonus")
            print(f"    {synergy.description}")
        
        totals = synergy_session.expected_results['totals']
        bonus_avg = totals.get('synergy_bonus_average', 1.0)
        print(f"\nBonus moyen de synergie: {bonus_avg:.2f}x")
    else:
        print("Aucune synergie disponible au niveau actuel")
    
    # Patterns avanc√©s
    print(f"\nüé® PATTERNS DE FARMING AVANC√âS")
    print("-" * 40)
    
    # Pattern fermier
    farmer = Farmer()
    resources = farmer.get_available_resources((20, 40))[:6]
    
    patterns = ['linear', 'spiral', 'zigzag', 'cluster']
    print(f"Patterns de farming test√©s sur {len(resources)} ressources:")
    
    for pattern_name in patterns:
        coordinates = farmer.get_farming_pattern(resources, pattern_name)
        distance_total = 0
        for i in range(1, len(coordinates)):
            x1, y1 = coordinates[i-1]
            x2, y2 = coordinates[i]
            distance_total += ((x2-x1)**2 + (y2-y1)**2)**0.5
        
        print(f"  ‚Ä¢ {pattern_name.title()}: {len(coordinates)} points, "
              f"distance totale: {distance_total:.1f}")
    
    # Calculs √©conomiques avanc√©s
    print(f"\nüí∞ ANALYSES √âCONOMIQUES")
    print("-" * 40)
    
    # ROI des am√©liorations
    alchemist = Alchemist()
    workshop_analysis = alchemist.get_workshop_upgrades()
    
    if 'roi_analysis' in workshop_analysis:
        roi = workshop_analysis['roi_analysis']
        print(f"Analyse ROI atelier alchimie:")
        print(f"  Niveau actuel: {workshop_analysis['current_level']}")
        print(f"  Co√ªt am√©lioration: {workshop_analysis['upgrade_cost']:,} kamas")
        print(f"  Am√©lioration quotidienne: {roi['daily_improvement']:.0f} kamas/jour")
        print(f"  Retour sur investissement: {roi['payback_period_days']:.0f} jours")
        print(f"  Recommandation: {workshop_analysis['recommendation']}")

if __name__ == "__main__":
    print("üéÆ SYST√àME DE M√âTIERS COMPLET - D√âMONSTRATION")
    print("D√©velopp√© avec Claude Code")
    
    try:
        # D√©monstrations principales
        demo_individual_professions()
        demo_profession_manager() 
        demo_advanced_features()
        
        print("\n" + "=" * 60)
        print("‚úÖ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS")
        print("=" * 60)
        print("\nToutes les fonctionnalit√©s ont √©t√© test√©es:")
        print("‚Ä¢ M√©tiers individuels (Fermier, B√ªcheron, Mineur, Alchimiste)")
        print("‚Ä¢ Calculs de rentabilit√© et optimisation de routes")
        print("‚Ä¢ Patterns de farming et strat√©gies de r√©colte")
        print("‚Ä¢ Gestionnaire global et synergies entre m√©tiers")
        print("‚Ä¢ Optimisation multi-objectifs et sessions automatis√©es")
        print("‚Ä¢ Analyses √©conomiques et recommandations intelligentes")
        
        print(f"\nLe syst√®me est pr√™t pour l'int√©gration au bot principal!")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DE LA D√âMONSTRATION: {e}")
        import traceback
        traceback.print_exc()