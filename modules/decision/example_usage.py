"""
Exemple d'utilisation du module de d√©cision.

Ce fichier d√©montre comment utiliser le moteur de d√©cision et le s√©lecteur
de strat√©gies dans diff√©rentes situations de jeu.
"""

import logging
import time
from typing import List

# Imports du module de d√©cision
from .decision_engine import (
    DecisionEngine, Decision, DecisionContext, 
    Priority, ActionType
)
from .strategy_selector import StrategySelector, StrategyType, Situation
from .config import DecisionConfigManager

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)


def create_sample_decisions() -> List[Decision]:
    """Cr√©e des exemples de d√©cisions possibles."""
    decisions = [
        # D√©cisions de survie
        Decision(
            action_id="heal_critical",
            action_type=ActionType.SURVIVAL,
            priority=Priority.CRITICAL,
            confidence=0.95,
            estimated_duration=3.0,
            success_probability=0.98,
            risk_level=0.1,
            reward_estimate=0.9,
            prerequisites=["health_below_30"],
            module_source="combat"
        ),
        Decision(
            action_id="drink_mana_potion",
            action_type=ActionType.SURVIVAL,
            priority=Priority.HIGH,
            confidence=0.9,
            estimated_duration=2.0,
            success_probability=0.99,
            risk_level=0.05,
            reward_estimate=0.7,
            prerequisites=["mana_below_20"],
            module_source="combat"
        ),
        
        # D√©cisions de combat
        Decision(
            action_id="attack_weakest_enemy",
            action_type=ActionType.COMBAT,
            priority=Priority.MEDIUM,
            confidence=0.8,
            estimated_duration=5.0,
            success_probability=0.85,
            risk_level=0.4,
            reward_estimate=0.8,
            prerequisites=["in_combat"],
            module_source="combat"
        ),
        Decision(
            action_id="cast_area_spell",
            action_type=ActionType.COMBAT,
            priority=Priority.MEDIUM,
            confidence=0.7,
            estimated_duration=8.0,
            success_probability=0.75,
            risk_level=0.6,
            reward_estimate=1.2,
            prerequisites=["mana_above_50", "multiple_enemies"],
            module_source="combat"
        ),
        
        # D√©cisions de profession
        Decision(
            action_id="harvest_wheat",
            action_type=ActionType.PROFESSION,
            priority=Priority.LOW,
            confidence=0.95,
            estimated_duration=15.0,
            success_probability=0.98,
            risk_level=0.1,
            reward_estimate=0.6,
            prerequisites=["not_in_combat", "wheat_available"],
            module_source="profession"
        ),
        Decision(
            action_id="mine_iron_ore",
            action_type=ActionType.PROFESSION,
            priority=Priority.LOW,
            confidence=0.9,
            estimated_duration=20.0,
            success_probability=0.9,
            risk_level=0.2,
            reward_estimate=0.8,
            prerequisites=["not_in_combat", "pickaxe_equipped"],
            module_source="profession"
        ),
        
        # D√©cisions de d√©placement
        Decision(
            action_id="move_to_safe_zone",
            action_type=ActionType.MOVEMENT,
            priority=Priority.HIGH,
            confidence=0.85,
            estimated_duration=10.0,
            success_probability=0.9,
            risk_level=0.3,
            reward_estimate=0.5,
            prerequisites=["not_safe_zone"],
            module_source="navigation"
        ),
        Decision(
            action_id="move_to_farming_area",
            action_type=ActionType.MOVEMENT,
            priority=Priority.MEDIUM,
            confidence=0.9,
            estimated_duration=30.0,
            success_probability=0.95,
            risk_level=0.2,
            reward_estimate=0.4,
            prerequisites=["safe_zone"],
            module_source="navigation"
        ),
        
        # D√©cisions d'inventaire
        Decision(
            action_id="drop_low_value_items",
            action_type=ActionType.INVENTORY,
            priority=Priority.MEDIUM,
            confidence=0.8,
            estimated_duration=5.0,
            success_probability=0.95,
            risk_level=0.1,
            reward_estimate=0.3,
            prerequisites=["inventory_above_80"],
            module_source="inventory"
        ),
        Decision(
            action_id="bank_valuable_items",
            action_type=ActionType.INVENTORY,
            priority=Priority.LOW,
            confidence=0.9,
            estimated_duration=45.0,
            success_probability=0.98,
            risk_level=0.1,
            reward_estimate=0.7,
            prerequisites=["near_bank"],
            module_source="inventory"
        )
    ]
    
    return decisions


def create_sample_contexts() -> List[DecisionContext]:
    """Cr√©e des exemples de contextes de d√©cision."""
    contexts = [
        # Contexte 1: Farming paisible
        DecisionContext(
            health_percent=85.0,
            mana_percent=90.0,
            pod_percent=45.0,
            in_combat=False,
            enemies_count=0,
            allies_count=0,
            combat_difficulty=0.0,
            current_map="Champs de Cania",
            safe_zone=True,
            resources_available=["wheat", "barley", "flax"],
            current_objective="farm_cereals",
            objective_progress=0.3,
            session_time=1800.0,
            risk_tolerance=0.4,
            efficiency_focus=0.7
        ),
        
        # Contexte 2: Combat dangereux
        DecisionContext(
            health_percent=25.0,
            mana_percent=15.0,
            pod_percent=70.0,
            in_combat=True,
            enemies_count=3,
            allies_count=1,
            combat_difficulty=0.8,
            current_map="Donjon des Scarafeuilles",
            safe_zone=False,
            resources_available=[],
            current_objective="complete_dungeon",
            objective_progress=0.6,
            session_time=3600.0,
            risk_tolerance=0.3,
            efficiency_focus=0.4
        ),
        
        # Contexte 3: Exploration √©quilibr√©e
        DecisionContext(
            health_percent=65.0,
            mana_percent=70.0,
            pod_percent=85.0,
            in_combat=False,
            enemies_count=1,
            allies_count=2,
            combat_difficulty=0.4,
            current_map="For√™t Mall√©fique",
            safe_zone=False,
            resources_available=["ash_wood", "chestnut_wood"],
            current_objective="explore_area",
            objective_progress=0.8,
            session_time=5400.0,
            risk_tolerance=0.6,
            efficiency_focus=0.5
        )
    ]
    
    return contexts


def demonstrate_decision_engine():
    """D√©montre l'utilisation du moteur de d√©cision."""
    print("=== D√âMONSTRATION DU MOTEUR DE D√âCISION ===\n")
    
    # Cr√©er le moteur de d√©cision
    engine = DecisionEngine()
    
    # Pr√©parer les donn√©es d'exemple
    decisions = create_sample_decisions()
    contexts = create_sample_contexts()
    
    for i, context in enumerate(contexts, 1):
        print(f"--- Sc√©nario {i}: {context.current_objective} ---")
        print(f"Sant√©: {context.health_percent}%, Mana: {context.mana_percent}%")
        print(f"En combat: {context.in_combat}, Zone s√ªre: {context.safe_zone}")
        
        # Prendre une d√©cision
        best_decision = engine.make_decision(decisions, context)
        
        if best_decision:
            print(f"‚úÖ D√©cision choisie: {best_decision.action_id}")
            print(f"   Type: {best_decision.action_type.value}")
            print(f"   Priorit√©: {best_decision.priority.name}")
            print(f"   Confiance: {best_decision.confidence:.2f}")
            print(f"   Dur√©e estim√©e: {best_decision.estimated_duration:.1f}s")
        else:
            print("‚ùå Aucune d√©cision valide trouv√©e")
        
        # Obtenir des recommandations
        print("\nüìã Recommandations:")
        recommendations = engine.get_recommendations(decisions, context, top_n=3)
        for j, (decision, score, explanation) in enumerate(recommendations, 1):
            print(f"   {j}. {decision.action_id} (score: {score:.1f})")
            print(f"      {explanation}")
        
        print("\n" + "="*60 + "\n")


def demonstrate_strategy_selector():
    """D√©montre l'utilisation du s√©lecteur de strat√©gies."""
    print("=== D√âMONSTRATION DU S√âLECTEUR DE STRAT√âGIES ===\n")
    
    # Cr√©er le s√©lecteur
    selector = StrategySelector()
    
    # Pr√©parer les contextes
    contexts = create_sample_contexts()
    context_names = ["Farming paisible", "Combat dangereux", "Exploration √©quilibr√©e"]
    
    for i, (context, name) in enumerate(zip(contexts, context_names)):
        print(f"--- Sc√©nario: {name} ---")
        
        # S√©lectionner une strat√©gie
        strategy_type, strategy_config = selector.select_strategy(context)
        
        print(f"üéØ Strat√©gie s√©lectionn√©e: {strategy_type.value}")
        print(f"   Description: {strategy_config.description}")
        print(f"   Poids - Survie: {strategy_config.weights.survival:.1f}, "
              f"Efficacit√©: {strategy_config.weights.efficiency:.1f}")
        print(f"   Tol√©rance risque: {strategy_config.weights.risk_tolerance:.1f}")
        
        # Obtenir des recommandations de strat√©gies
        print("\nüìä Recommandations de strat√©gies:")
        recommendations = selector.get_strategy_recommendations(context, top_n=3)
        for j, (strat_type, score, explanation) in enumerate(recommendations, 1):
            print(f"   {j}. {strat_type.value} (score: {score:.2f})")
            print(f"      {explanation}")
        
        # Simuler un r√©sultat et mettre √† jour
        success = True if i != 1 else False  # Le combat dangereux √©choue
        reward = 0.8 if success else 0.2
        duration = 120.0
        
        selector.update_strategy_outcome(strategy_type, success, reward, duration)
        print(f"\nüìà R√©sultat simul√©: {'Succ√®s' if success else '√âchec'} "
              f"(r√©compense: {reward}, dur√©e: {duration}s)")
        
        print("\n" + "="*60 + "\n")


def demonstrate_config_manager():
    """D√©montre l'utilisation du gestionnaire de configuration."""
    print("=== D√âMONSTRATION DU GESTIONNAIRE DE CONFIGURATION ===\n")
    
    # Cr√©er le gestionnaire
    config_manager = DecisionConfigManager()
    
    # Afficher les profils disponibles
    print("üìÅ Profils disponibles:")
    for profile in config_manager.get_available_profiles():
        description = config_manager.get_profile_description(profile)
        print(f"   - {profile}: {description}")
    
    print("\n" + "-"*50 + "\n")
    
    # Appliquer diff√©rents profils et montrer les diff√©rences
    test_profiles = ['farmer_safe', 'combat_aggressive', 'explorer_balanced']
    
    for profile in test_profiles:
        print(f"üîß Application du profil: {profile}")
        config_manager.apply_profile(profile)
        
        config = config_manager.get_config()
        print(f"   Poids survie: {config.priority_weights['survival']:.1f}")
        print(f"   Poids efficacit√©: {config.priority_weights['efficiency']:.1f}")
        print(f"   Limite combat: {config.time_limits['combat']:.0f}s")
        print(f"   Seuil sant√© critique: {config.activation_thresholds['critical_health']:.0f}%")
        
        print()
    
    # D√©monstration des modifications personnalis√©es
    print("üéõÔ∏è  Personnalisation des priorit√©s:")
    config_manager.update_priority_weights({
        'survival': 3.0,
        'efficiency': 0.5
    })
    
    config_manager.update_time_limits({
        'combat': 30.0,  # Combat tr√®s court
        'profession': 7200.0  # Farming tr√®s long
    })
    
    print("   ‚úÖ Priorit√©s personnalis√©es appliqu√©es")
    
    # Configuration d'un moteur avec le gestionnaire
    engine = DecisionEngine()
    selector = StrategySelector()
    
    config_manager.configure_decision_engine(engine)
    config_manager.configure_strategy_selector(selector)
    
    print("   ‚úÖ Moteur et s√©lecteur configur√©s")
    
    print("\n" + "="*60 + "\n")


def demonstrate_complete_workflow():
    """D√©montre un workflow complet avec tous les composants."""
    print("=== WORKFLOW COMPLET ===\n")
    
    # Initialisation
    config_manager = DecisionConfigManager()
    engine = DecisionEngine()
    selector = StrategySelector()
    
    # Configuration pour farming efficace
    config_manager.apply_profile('farmer_efficient')
    config_manager.configure_decision_engine(engine)
    config_manager.configure_strategy_selector(selector)
    
    print("üöÄ Syst√®me initialis√© avec profil 'farmer_efficient'\n")
    
    # Simulation d'une session de jeu
    decisions = create_sample_decisions()
    farming_context = create_sample_contexts()[0]  # Contexte de farming
    
    print("üìç Situation: Farming de c√©r√©ales")
    print(f"   Sant√©: {farming_context.health_percent}%")
    print(f"   Inventaire: {farming_context.pod_percent}%")
    print(f"   Objectif: {farming_context.current_objective}")
    
    # 1. S√©lectionner la strat√©gie
    strategy_type, strategy_config = selector.select_strategy(farming_context)
    print(f"\nüéØ Strat√©gie: {strategy_type.value}")
    
    # 2. Prendre une d√©cision
    best_decision = engine.make_decision(decisions, farming_context)
    print(f"‚ö° Action: {best_decision.action_id}")
    
    # 3. Simuler l'ex√©cution
    print(f"‚è±Ô∏è  Ex√©cution pendant {best_decision.estimated_duration:.0f}s...")
    time.sleep(0.1)  # Simulation
    
    # 4. Mettre √† jour les r√©sultats
    success = True
    actual_duration = best_decision.estimated_duration * 1.1  # L√©g√®rement plus long
    actual_reward = 0.7
    
    engine.update_decision_outcome(
        f"{best_decision.action_id}_{int(time.time())}", 
        success, 
        actual_duration, 
        actual_reward
    )
    
    selector.update_strategy_outcome(
        strategy_type, 
        success, 
        actual_reward, 
        actual_duration
    )
    
    print(f"‚úÖ R√©sultat: {'Succ√®s' if success else '√âchec'}")
    print(f"   R√©compense: {actual_reward}")
    print(f"   Dur√©e: {actual_duration:.1f}s")
    
    # 5. Afficher les statistiques
    print("\nüìä Statistiques:")
    engine_stats = engine.get_decision_stats()
    strategy_stats = selector.get_strategy_analytics()
    
    print(f"   D√©cisions prises: {engine_stats.get('total_decisions', 0)}")
    print(f"   Taux de succ√®s: {engine_stats.get('success_rate', 0):.1%}")
    print(f"   Usage strat√©gies: {strategy_stats.get('total_usage', 0)}")
    
    # 6. Sauvegarder l'√©tat
    config_manager.save_engine_state(engine)
    config_manager.save_strategy_state(selector)
    print("\nüíæ √âtat sauvegard√©")
    
    print("\n" + "="*60)


def main():
    """Fonction principale qui ex√©cute tous les exemples."""
    print("ü§ñ SYST√àME DE D√âCISION INTELLIGENT - D√âMONSTRATIONS")
    print("="*70 + "\n")
    
    try:
        # Ex√©cuter toutes les d√©monstrations
        demonstrate_decision_engine()
        demonstrate_strategy_selector()
        demonstrate_config_manager()
        demonstrate_complete_workflow()
        
        print("\n‚úÖ Toutes les d√©monstrations termin√©es avec succ√®s!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur pendant la d√©monstration: {e}")
        logging.exception("Erreur compl√®te:")


if __name__ == "__main__":
    main()