#!/usr/bin/env python3
"""
Exemples d'utilisation des points d'entr√©e du bot DOFUS.

Ce script d√©montre comment utiliser les diff√©rents points d'entr√©e
et leurs int√©grations pour des sc√©narios courants.
"""

import sys
import asyncio
import subprocess
import time
from pathlib import Path

# Ajouter le r√©pertoire racine au path Python
sys.path.insert(0, str(Path(__file__).parent))

from bot_launcher import BotLauncher, ProfileType
from calibrate import CalibrationTool
from monitor import MetricsCollector, AlertManager


async def exemple_creation_profil():
    """Exemple : Cr√©er et configurer un profil complet."""
    print("=== Exemple 1 : Cr√©ation de Profil ===")
    
    launcher = BotLauncher()
    
    # Cr√©er un profil farmer
    try:
        profile = launcher.profile_manager.create_profile(
            name="ExempleFarmer",
            profile_type=ProfileType.FARMER,
            description="Profil d'exemple pour farmer",
            character_name="BotFarmeur",
            character_class="osamodas",
            server="Ily"
        )
        
        print(f"‚úì Profil '{profile.name}' cr√©√© avec succ√®s")
        print(f"  Type: {profile.type.value}")
        print(f"  Personnage: {profile.character_name}")
        print(f"  Modules actifs: {len(profile.modules)}")
        
        # Configurer des horaires de planification
        launcher.setup_schedule("ExempleFarmer", ["09:00", "14:00", "20:00"])
        print("‚úì Planification configur√©e")
        
    except ValueError as e:
        print(f"‚úó Erreur : {e}")
    
    print()


async def exemple_calibration_automatique():
    """Exemple : Calibration automatique de l'interface."""
    print("=== Exemple 2 : Calibration Automatique ===")
    
    calibration_tool = CalibrationTool()
    
    # Tentative de calibration automatique
    result = calibration_tool.auto_calibrate_interface()
    
    if "error" in result:
        print(f"‚úó Erreur de calibration : {result['error']}")
    else:
        print(f"‚úì Zones calibr√©es : {len(result['zones_calibrated'])}")
        print(f"‚úó Zones √©chou√©es : {len(result['zones_failed'])}")
        
        if result["zones_calibrated"]:
            print("  Zones r√©ussies :")
            for zone in result["zones_calibrated"]:
                print(f"    - {zone}")
        
        if result.get("screenshot_saved"):
            print(f"  Capture sauvegard√©e : {result['screenshot_path']}")
    
    # Tester une zone sp√©cifique
    if calibration_tool.config and "chat_zone" in calibration_tool.config.zones:
        test_result = calibration_tool.test_zone_detection("chat_zone")
        if test_result["success"]:
            print(f"‚úì Test zone chat r√©ussi (complexit√©: {test_result['complexity_score']:.2f})")
        else:
            print(f"‚úó Test zone chat √©chou√© : {test_result['error']}")
    
    print()


async def exemple_monitoring_integration():
    """Exemple : Int√©gration du syst√®me de monitoring."""
    print("=== Exemple 3 : Monitoring Int√©gr√© ===")
    
    # Cr√©er les composants de monitoring
    metrics_collector = MetricsCollector()
    alert_manager = AlertManager()
    
    print("‚úì Composants de monitoring cr√©√©s")
    
    # Simuler quelques m√©triques
    for i in range(5):
        system_metrics = metrics_collector.collect_system_metrics()
        bot_metrics = metrics_collector.collect_bot_metrics()
        
        print(f"  Mesure {i+1} - CPU: {system_metrics.cpu_percent:.1f}%, "
              f"M√©moire: {system_metrics.memory_percent:.1f}%")
        
        # V√©rifier les alertes
        alert_manager.check_alerts(system_metrics, bot_metrics)
        
        # Stocker en base
        metrics_collector.store_metrics(system_metrics, bot_metrics)
        
        await asyncio.sleep(1)
    
    # R√©cup√©rer les alertes r√©centes
    recent_alerts = alert_manager.get_active_alerts(10)
    if recent_alerts:
        print(f"‚ö†Ô∏è  Alertes d√©tect√©es : {len(recent_alerts)}")
        for name, message, timestamp in recent_alerts:
            print(f"    - {name}: {message}")
    else:
        print("‚úì Aucune alerte d√©tect√©e")
    
    print()


async def exemple_lancement_intelligent():
    """Exemple : Lancement intelligent avec conditions."""
    print("=== Exemple 4 : Lancement Intelligent ===")
    
    launcher = BotLauncher()
    
    # V√©rifier les profils disponibles
    profiles = launcher.profile_manager.list_profiles()
    print(f"Profils disponibles : {len(profiles)}")
    
    if profiles:
        # D√©tection automatique du meilleur profil
        best_profile = launcher.auto_detect_and_launch()
        
        if best_profile:
            print(f"‚úì Profil optimal d√©tect√© : {best_profile}")
            
            # Simuler un lancement (sans vraiment d√©marrer le bot)
            print("  Simulation du lancement...")
            print("  ‚úì Conditions v√©rifi√©es")
            print("  ‚úì Profil charg√©")
            print("  ‚úì Bot pr√™t √† d√©marrer")
            
        else:
            print("‚úó Aucun profil appropri√© trouv√©")
    else:
        print("‚ÑπÔ∏è  Aucun profil configur√© - utilisez bot_launcher.py pour en cr√©er")
    
    print()


async def exemple_workflow_complet():
    """Exemple : Workflow complet d'utilisation."""
    print("=== Exemple 5 : Workflow Complet ===")
    
    print("1. V√©rification des pr√©requis...")
    
    # V√©rifier les dossiers
    required_dirs = [Path("config"), Path("config/profiles"), Path("logs")]
    for directory in required_dirs:
        if directory.exists():
            print(f"  ‚úì {directory}")
        else:
            directory.mkdir(parents=True, exist_ok=True)
            print(f"  üìÅ {directory} cr√©√©")
    
    print("\n2. Configuration initiale...")
    
    # Cr√©er un profil de test si n√©cessaire
    launcher = BotLauncher()
    if not launcher.profile_manager.list_profiles():
        try:
            profile = launcher.profile_manager.create_profile(
                name="TestBot",
                profile_type=ProfileType.FARMER,
                description="Profil de test automatique"
            )
            print("  ‚úì Profil de test cr√©√©")
        except:
            print("  ‚ö†Ô∏è  Profil de test d√©j√† existant")
    
    print("\n3. Test des composants...")
    
    # Test calibration
    calibration_tool = CalibrationTool()
    if calibration_tool.config:
        print("  ‚úì Calibration charg√©e")
    else:
        print("  ‚ö†Ô∏è  Calibration non configur√©e")
    
    # Test monitoring
    metrics_collector = MetricsCollector()
    system_metrics = metrics_collector.collect_system_metrics()
    print(f"  ‚úì Monitoring actif (CPU: {system_metrics.cpu_percent:.1f}%)")
    
    print("\n4. Simulation d'une session compl√®te...")
    
    steps = [
        "Chargement du profil",
        "V√©rification de la calibration",
        "Initialisation des modules", 
        "D√©marrage du monitoring",
        "Lancement du bot",
        "Surveillance active",
        "Arr√™t propre"
    ]
    
    for i, step in enumerate(steps, 1):
        print(f"  {i}/7 {step}...")
        await asyncio.sleep(0.5)  # Simulation
        print(f"      ‚úì Termin√©")
    
    print("\n‚úÖ Workflow complet simul√© avec succ√®s !")
    print()


def exemple_scripts_utilitaires():
    """Exemples de scripts utilitaires."""
    print("=== Exemple 6 : Scripts Utilitaires ===")
    
    scripts = {
        "D√©marrage rapide CLI": "python main.py --mode cli --auto-start",
        "Interface graphique": "python main.py --mode gui",
        "Monitoring dashboard": "python monitor.py --dashboard", 
        "Calibration GUI": "python calibrate.py --gui",
        "Cr√©er profil farmer": "python bot_launcher.py --create-profile Farmer --type farmer",
        "Lancement automatique": "python bot_launcher.py --auto-detect",
        "Serveur web monitoring": "python monitor.py --web-server --port 8080"
    }
    
    print("Scripts pr√™ts √† utiliser :")
    for name, command in scripts.items():
        print(f"  {name}:")
        print(f"    {command}")
        print()


async def demonstration_complete():
    """D√©monstration compl√®te de tous les exemples."""
    print("ü§ñ D√âMONSTRATION DES POINTS D'ENTR√âE BOT DOFUS")
    print("=" * 60)
    print()
    
    # Ex√©cuter tous les exemples
    await exemple_creation_profil()
    await exemple_calibration_automatique()
    await exemple_monitoring_integration()
    await exemple_lancement_intelligent()
    await exemple_workflow_complet()
    exemple_scripts_utilitaires()
    
    print("üéâ D√©monstration termin√©e avec succ√®s !")
    print()
    print("Pour utiliser le bot en production :")
    print("1. Cr√©ez vos profils : python bot_launcher.py --create-profile MonBot --type farmer")
    print("2. Calibrez l'interface : python calibrate.py --gui")
    print("3. Lancez le bot : python main.py --mode gui --profile MonBot")
    print("4. Surveillez : python monitor.py --dashboard")


if __name__ == "__main__":
    try:
        print("Lancement de la d√©monstration...")
        print("(Appuyez sur Ctrl+C pour interrompre)")
        print()
        
        asyncio.run(demonstration_complete())
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  D√©monstration interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la d√©monstration : {e}")
        sys.exit(1)