"""
Script de test rapide pour l'extraction de donn√©es Dofus
V√©rifie que tout fonctionne correctement
"""

import sys
from pathlib import Path

# Ajout du chemin du projet
sys.path.insert(0, str(Path(__file__).parent))

from tools.dofus_data_extractor import DofusDataManager

def main():
    print("=" * 70)
    print("üß™ TEST RAPIDE - EXTRACTION DONN√âES DOFUS")
    print("=" * 70)
    print()
    
    # Cr√©ation du manager
    manager = DofusDataManager()
    
    # Test 1 : Recherche installation
    print("üìç Test 1 : Recherche installation Dofus Unity...")
    has_local = manager.setup()
    
    if has_local:
        print(f"   ‚úÖ {len(manager.installations)} installation(s) trouv√©e(s)")
        for install in manager.installations:
            print(f"      ‚Ä¢ {install.path}")
            print(f"        Type: {install.install_type}")
            print(f"        Version: {install.version}")
            print(f"        Dossiers data: {len(install.data_folders)}")
    else:
        print("   ‚ö†Ô∏è Aucune installation locale trouv√©e")
        print("   üí° Le bot utilisera les fansites pour r√©cup√©rer les donn√©es")
    
    print()
    
    # Test 2 : Extraction (si installation trouv√©e)
    if has_local:
        print("üìä Test 2 : Extraction des donn√©es...")
        print("   (Cela peut prendre 1-2 minutes)")
        print()
        
        all_data = manager.extract_all_data()
        
        print()
        print("‚úÖ R√âSULTATS DE L'EXTRACTION:")
        print("-" * 70)
        
        total_entries = 0
        for category, data in all_data.items():
            count = len(data)
            total_entries += count
            if count > 0:
                status = "‚úÖ"
                print(f"   {status} {category.capitalize():15} : {count:5} entr√©es")
            else:
                status = "‚ö†Ô∏è"
                print(f"   {status} {category.capitalize():15} : {count:5} entr√©es (aucune donn√©e)")
        
        print("-" * 70)
        print(f"   üìä TOTAL : {total_entries} entr√©es extraites")
        print()
        
        # Test 3 : V√©rification qualit√© des donn√©es
        print("üîç Test 3 : V√©rification qualit√© des donn√©es...")
        
        if all_data["monsters"]:
            sample_monster = list(all_data["monsters"].values())[0]
            print(f"   ‚úÖ Exemple monstre : {sample_monster.get('name', 'Unknown')}")
            print(f"      ‚Ä¢ Niveau : {sample_monster.get('level', 'N/A')}")
            print(f"      ‚Ä¢ HP : {sample_monster.get('health', 'N/A')}")
            
            required_fields = ["level", "health", "resistances"]
            has_all_fields = all(field in sample_monster for field in required_fields)
            
            if has_all_fields:
                print("   ‚úÖ Structure des donn√©es : OK")
            else:
                print("   ‚ö†Ô∏è Structure des donn√©es : Incompl√®te")
        
        print()
        
        # Test 4 : Sauvegarde
        print("üíæ Test 4 : V√©rification fichiers sauvegard√©s...")
        
        extracted_dir = Path("data/extracted")
        if extracted_dir.exists():
            files = list(extracted_dir.glob("*.json"))
            print(f"   ‚úÖ {len(files)} fichier(s) trouv√©(s) dans data/extracted/")
            for file in files[:5]:  # Affiche les 5 premiers
                size_kb = file.stat().st_size / 1024
                print(f"      ‚Ä¢ {file.name} ({size_kb:.1f} KB)")
        else:
            print("   ‚ö†Ô∏è Dossier data/extracted/ non trouv√©")
    
    else:
        print("üì° Test 2 : Mode fansite...")
        print("   üí° Exemple de r√©cup√©ration depuis fansite:")
        print("      monster_data = manager.get_monster_info('Bouftou')")
        print("   ‚ö†Ô∏è Non test√© dans ce script (n√©cessite connexion internet)")
    
    print()
    print("=" * 70)
    print("‚úÖ TESTS TERMIN√âS")
    print("=" * 70)
    print()
    
    # Recommandations
    if has_local and total_entries > 0:
        print("üéâ SUCC√àS ! Votre bot peut maintenant utiliser les donn√©es extraites.")
        print()
        print("üìù PROCHAINES √âTAPES:")
        print("   1. Int√©grer les donn√©es dans knowledge_graph.py")
        print("   2. Utiliser dans decision_engine.py pour d√©cisions intelligentes")
        print("   3. R√©f√©rencer dans combat_advisor.py pour strat√©gies optimales")
        print()
        print("üí° ASTUCE:")
        print("   Planifiez une extraction hebdomadaire pour rester √† jour avec")
        print("   les mises √† jour du jeu Dofus Unity.")
    
    elif has_local and total_entries == 0:
        print("‚ö†Ô∏è ATTENTION : Installation trouv√©e mais aucune donn√©e extraite.")
        print()
        print("üîß SOLUTIONS POSSIBLES:")
        print("   1. V√©rifier que Dofus Unity est bien install√©")
        print("   2. Lancer le jeu une fois pour g√©n√©rer les fichiers de donn√©es")
        print("   3. V√©rifier les permissions d'acc√®s aux dossiers")
        print("   4. Utiliser le mode fansite en attendant")
    
    else:
        print("üí° MODE FANSITE ACTIV√â")
        print()
        print("   Le bot r√©cup√©rera les donn√©es en ligne √† la demande.")
        print("   Cela fonctionne tr√®s bien, mais peut √™tre plus lent.")
        print()
        print("   Pour activer l'extraction locale:")
        print("   1. Installer Dofus Unity")
        print("   2. Relancer ce script")
    
    print()
    print("=" * 70)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Test interrompu par l'utilisateur")
    except Exception as e:
        print(f"\n\n‚ùå ERREUR : {e}")
        import traceback
        traceback.print_exc()
